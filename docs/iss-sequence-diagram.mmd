sequenceDiagram
    actor user as API client
    participant auth as Auth system
    participant user_store as User store
    participant key_management as Key management
    participant key_store as Key store
    participant crypto as Crypto operations
    participant record_management as Record management
    participant record_store as Record store
    participant role_management as Role management
    participant role_store as Role store

    %% User auth workflow
    Note over user,role_store: User authentication workflow
    user->>auth: Register
    auth->>user: Request registration details
    auth->>user: Send two factor authentication
    auth->>auth: Check two factor authentication code
    auth->>user_store: Store user details/credentials
    auth-->>user: Registration success
    user->>auth: Login with credentials
    auth->>user_store: Check user credentials
    auth->>user: Send two factor authentication
    auth->>auth: Check two factor authentication code
    auth-->>user: Login success
    alt Upon successful login
        auth->>key_management: Request to generate keys
        key_management->>key_management: Generate RSA public key
        key_management->>key_management: Generate RSA private key
        key_management->>user: Send RSA public key
        key_management->>key_store: Store RSA private key
        key_management->>key_management: Generate AES key
        key_management->>key_store: Store AES key
    end

    %% Record store workflow
    Note over user,role_store: User record store workflow
    user->>record_management: User sends record data to store
    record_management->>key_management: Request user's AES key
    key_management->>key_store: Request to check key store
    key_store->>key_store: Return user's AES key
    key_store-->>key_management: Key retrieve success
    alt Upon successful key retrieval
        key_management->>crypto: Send user's AES key
        crypto->>record_management: AES encrypt data
    end
    record_management->>role_management: Request Role Based Access Control
    role_management->>role_management: Check user role
    role_management-->>record_management: Role authorisation success
    alt Upon successful role access
        key_management->>key_store: Request user's RSA public key
        key_store->>key_store: Return user's RSA public key
        key_store-->>key_management: Key retrieve success
        alt Upon successful key retrieval
            key_management->>crypto: Send user's RSA public key
            crypto->>record_management: RSA encrypt record data
        end
        key_management->>key_store: Get user's RSA private key
        key_store->>key_store: Return user's RSA private key
        key_store-->>key_management: Key retrieve success
        alt Upon successful key retrieval
            key_management->>crypto: Send user's RSA private key
            crypto->>record_management: RSA decrypt record data
            record_management->>record_store: Store record data
        end
    end
    record_management-->>user: Record store success

    %% Record retrieve workflow
    Note over user,role_store: User record retrieve workflow
    user->>record_management: User retrieves record data
    record_management->>role_management: Request Role Based Access Control
    role_management->>role_management: Check user role
    role_management-->>record_management: Role authorisation success
    alt Upon successful role access
        key_management->>key_store: Request user's RSA public key
        key_store->>key_store: Return user's RSA public key
        key_store-->>key_management: Key retrieve success
        alt Upon successful key retrieval
            key_management->>crypto: Send user's RSA public key
            crypto->>record_management: RSA encrypt record data
        end
        key_management->>key_store: Get user's RSA private key
        key_store->>key_store: Return user's RSA private key
        key_store-->>key_management: Key retrieve success
        alt Upon successful key retrieval
            key_management->>crypto: Send user's RSA private key
            crypto->>record_management: RSA decrypt record data
        end
        record_management->>key_management: Request user's AES key
        key_management->>key_store: Request to check key store
        key_store->>key_store: Return user's AES key
        key_store-->>key_management: Key retrieve success
        alt Upon successful key retrieval
            key_management->>crypto: Send user's AES key
            crypto->>record_management: AES decrypt record data
        end
    end
    record_management-->>user: Record retrieve success

    %% Individual record access workflow
    Note over user,role_store: Individual record access workflow
    user->>record_management: Send data to be stored with access to specific user
    record_management->>role_management: Request Role Based Access Control
    role_management->>role_management: Check user role
    role_management-->>record_management: Role authorisation success
    alt Upon successful role access
        Note over key_management,record_store: User record store workflow is executed
    end
    record_management-->>user: Record store success
    user->>record_management: Wrong user attempts to retrieve record
    record_management->>role_management: Request Role Based Access Control
    role_management->>role_management: Check user role
    role_management-->>user: Role authorisation failed
    user->>record_management: Correct user attempts to retrieve record
    record_management->>role_management: Request Role Based Access Control
    role_management->>role_management: Check user role
    role_management-->>record_management: Role authorisation success
    alt Upon successful role access
        Note over user,record_management: User record retrieve workflow is executed
    end
    record_management-->>user: Record retrieve success

    %% Key expiry workflow
    Note over user,role_store: Key expiry workflow
    Note over user,key_store: User authentication workflow is executed
    key_management->>key_management: Request user's old AES key
    key_management->>key_store: Request to check key store
    key_store->>key_store: Return user's old AES key
    key_store-->>key_management: Key retrieve success
        alt Upon successful key retrieval
            key_management->>crypto: Send user's AES key
            crypto->>record_management: AES decrypt record data
        end
    key_management->>key_store: Generate new AES key
    key_management->>key_store: Request to check key store
    key_store->>key_store: Return user's new AES key
    key_store-->>key_management: Key retrieve success
    alt Upon successful key retrieval
        key_management->>crypto: Send user's AES key
        crypto->>record_management: AES encrypt data
    end
    Note over record_management,role_store: User record store workflow is executed
